plugins {
    id 'java'
    id 'idea'
    id 'io.freefair.lombok' version "8.3"
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0'
}

group = 'com.github.ducknowledges.spring-boot-scheduler'
version = '0.1.0' //use https://semver.org/

wrapper {
    gradleVersion '8.9'
}

// Plugin Config
java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

idea {
    project {
        languageLevel = 17
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


//Dependencies
ext {
    bom = [
            //BOM versions
            'springBoot': '2.7.16',
    ]
    versions = [
            //Dependencies version
    ]
}

dependencies {
    //Import a BOM
    implementation platform("org.springframework.boot:spring-boot-dependencies:${bom.springBoot}")

    //Spring Boot Dependencies
    implementation "org.springframework.boot:spring-boot-starter"

    //Commons starters

    //Dependencies


    //Processors

    //Test Dependencies
    testImplementation "org.springframework.boot:spring-boot-starter-test"


    //Integration Test Dependencies
}

//Dependencies resolver
configurations.configureEach {
    resolutionStrategy.failOnVersionConflict()
}

//Print dependencies from BOMs: Task -> other -> managedVersions
tasks.register('managedVersions') {
    doLast {
        dependencyManagement.managedVersions.each {
            print it.key + ':' + it.value + '\n'
        }
    }
}

//Build Project
compileJava {
    options.compilerArgs << '-Werror'
}

bootJar {
    archiveFileName.set("${project.name}-${project.version}.jar")
}

jar {
    enabled = false
}

// Code Quality Control


test {
    description = 'Runs unit tests.'
    useJUnitPlatform {}
}

// Dependencies repository
repositories {
    mavenCentral()
}

// Replace ${..} placeholder with gradle project properties
// use \${..} for Spring property placeholders
processResources {
    filesMatching('/application.yml') {
        expand(project.properties)
    }
}
processTestResources {
    filesMatching('/application.yml') {
        expand(project.properties)
    }
}
